diff --git a/src/game/level_update.c b/src/game/level_update.c
index 72a6a607..dfb28ac5 100644
--- a/src/game/level_update.c
+++ b/src/game/level_update.c
@@ -21,11 +21,6 @@
 #include "obj_behaviors.h"
 #include "save_file.h"
 #include "debug_course.h"
-#ifdef VERSION_EU
-#include "memory.h"
-#include "eu_translation.h"
-#include "segment_symbols.h"
-#endif
 #include "level_table.h"
 #include "course_table.h"
 #include "thread6.h"
@@ -35,6 +30,8 @@
 #include "pc/cliopts.h"
 #include "pc/configfile.h"
 
+#include "data/r96/r96_c_includes.h"
+
 #define PLAY_MODE_NORMAL 0
 #define PLAY_MODE_PAUSED 2
 #define PLAY_MODE_CHANGE_AREA 3
@@ -56,78 +53,28 @@
 
 #define WARP_NODE_CREDITS_MIN 0xF8
 
-#ifdef VERSION_JP
-const char *credits01[] = { "1GAME DIRECTOR", "SHIGERU MIYAMOTO" };
-const char *credits02[] = { "2ASSISTANT DIRECTORS", "YOSHIAKI KOIZUMI", "TAKASHI TEZUKA" };
-const char *credits03[] = { "2SYSTEM PROGRAMMERS", "YASUNARI NISHIDA", "YOSHINORI TANIMOTO" };
-const char *credits04[] = { "3PROGRAMMERS", "HAJIME YAJIMA", "DAIKI IWAMOTO", "TOSHIO IWAWAKI" };
-const char *credits05[] = { "1CAMERA PROGRAMMER", "TAKUMI KAWAGOE" };
-const char *credits06[] = { "1MARIO FACE PROGRAMMER", "GILES GODDARD" };
-const char *credits07[] = { "2COURSE DIRECTORS", "YOICHI YAMADA", "YASUHISA YAMAMURA" };
-const char *credits08[] = { "2COURSE DESIGNERS", "KENTA USUI", "NAOKI MORI" };
-const char *credits09[] = { "3COURSE DESIGNERS", "YOSHIKI HARUHANA", "MAKOTO MIYANAGA",
-                            "KATSUHIKO KANNO" };
-const char *credits10[] = { "1SOUND COMPOSER", "KOJI KONDO" };
-const char *credits11[] = { "1SOUND EFFECTS", "YOJI INAGAKI" };
-const char *credits12[] = { "1SOUND PROGRAMMER", "HIDEAKI SHIMIZU" };
-const char *credits13[] = { "23D ANIMATORS", "YOSHIAKI KOIZUMI", "SATORU TAKIZAWA" };
-const char *credits14[] = { "1CG DESIGNER", "MASANAO ARIMOTO" };
-const char *credits15[] = { "3TECHNICAL SUPPORT", "TAKAO SAWANO", "HIROHITO YOSHIMOTO", "HIROTO YADA" };
-const char *credits16[] = { "1TECHNICAL SUPPORT", "SGI. 64PROJECT STAFF" };
-const char *credits17[] = { "2PROGRESS MANAGEMENT", "KIMIYOSHI FUKUI", "KEIZO KATO" };
-const char *credits18[] = { "3SPECIAL THANKS TO", "JYOHO KAIHATUBU", "ALL NINTENDO",
-                            "MARIO CLUB STAFF" };
-const char *credits19[] = { "1PRODUCER", "SHIGERU MIYAMOTO" };
-const char *credits20[] = { "1EXECUTIVE PRODUCER", "HIROSHI YAMAUCHI" };
-#else
-const char *credits01[] = { "1GAME DIRECTOR", "SHIGERU MIYAMOTO" };
-const char *credits02[] = { "2ASSISTANT DIRECTORS", "YOSHIAKI KOIZUMI", "TAKASHI TEZUKA" };
-const char *credits03[] = { "2SYSTEM PROGRAMMERS", "YASUNARI NISHIDA", "YOSHINORI TANIMOTO" };
-const char *credits04[] = { "3PROGRAMMERS", "HAJIME YAJIMA", "DAIKI IWAMOTO", "TOSHIO IWAWAKI" };
-const char *credits05[] = {
-    "4CAMERA PROGRAMMER", "MARIO FACE PROGRAMMER", "TAKUMI KAWAGOE", "GILES GODDARD"
-}; // US combines camera programmer and Mario face programmer
-const char *credits06[] = { "2COURSE DIRECTORS", "YOICHI YAMADA", "YASUHISA YAMAMURA" };
-const char *credits07[] = { "2COURSE DESIGNERS", "KENTA USUI", "NAOKI MORI" };
-const char *credits08[] = { "3COURSE DESIGNERS", "YOSHIKI HARUHANA", "MAKOTO MIYANAGA",
-                            "KATSUHIKO KANNO" };
-#ifdef VERSION_US
-const char *credits09[] = { "1SOUND COMPOSER", "KOJI KONDO" };
-const char *credits10[] = { "4SOUND EFFECTS", "SOUND PROGRAMMER", "YOJI INAGAKI",
-                            "HIDEAKI SHIMIZU" }; // as well as sound effects and sound programmer
-const char *credits11[] = { "23-D ANIMATORS", "YOSHIAKI KOIZUMI", "SATORU TAKIZAWA" };
-const char *credits12[] = { "1ADDITIONAL GRAPHICS", "MASANAO ARIMOTO" };
-const char *credits13[] = { "3TECHNICAL SUPPORT", "TAKAO SAWANO", "HIROHITO YOSHIMOTO", "HIROTO YADA" };
-const char *credits14[] = { "1TECHNICAL SUPPORT", "SGI N64 PROJECT STAFF" };
-const char *credits15[] = { "2PROGRESS MANAGEMENT", "KIMIYOSHI FUKUI", "KEIZO KATO" };
-const char *credits16[] = { "5SCREEN TEXT WRITER", "TRANSLATION", "LESLIE SWAN", "MINA AKINO",
-                            "HIRO YAMADA" }; // ...in order to make room for these 2 new lines
-#else // VERSION_EU
-const char *credits09[] = { "7SOUND COMPOSER", "SOUND EFFECTS", "SOUND PROGRAMMER", "KOJI KONDO",
-                            "YOJI INAGAKI", "HIDEAKI SHIMIZU" };
-const char *credits10[] = { "63-D ANIMATORS", "ADDITIONAL GRAPHICS", "YOSHIAKI KOIZUMI", "SATORU TAKIZAWA",
-                            "MASANAO ARIMOTO" };
-const char *credits11[] = { "3TECHNICAL SUPPORT", "TAKAO SAWANO", "HIROHITO YOSHIMOTO", "HIROTO YADA" };
-const char *credits12[] = { "1TECHNICAL SUPPORT", "SGI N64 PROJECT STAFF" };
-const char *credits13[] = { "2PROGRESS MANAGEMENT", "KIMIYOSHI FUKUI", "KEIZO KATO" };
-const char *credits14[] = { "5SCREEN TEXT WRITER", "ENGLISH TRANSLATION", "LESLIE SWAN", "MINA AKINO",
-                            "HIRO YAMADA" };
-const char *credits15[] = { "4SCREEN TEXT WRITER", "FRENCH TRANSLATION", "JULIEN BARDAKOFF",
-                            "KENJI HARAGUCHI" };
-const char *credits16[] = { "4SCREEN TEXT WRITER", "GERMAN TRANSLATION", "THOMAS GOERG",
-                            "THOMAS SPINDLER" };
-#endif
-const char *credits17[] = { "4MARIO VOICE", "PEACH VOICE", "CHARLES MARTINET", "LESLIE SWAN" };
-const char *credits18[] = { "3SPECIAL THANKS TO", "EAD STAFF", "ALL NINTENDO PERSONNEL",
-#ifdef VERSION_US
-                           "MARIO CLUB STAFF" };
-#else // VERSION_EU
-                           "SUPER MARIO CLUB STAFF" };
-#endif
-const char *credits19[] = { "1PRODUCER", "SHIGERU MIYAMOTO" };
-const char *credits20[] = { "1EXECUTIVE PRODUCER", "HIROSHI YAMAUCHI" };
-#endif
-
+const char *credits01[] = { "1CREATIVE DIRECTOR", "ROKONSHIMO" };
+const char *credits02[] = { "3IMAGE GENERATOR", "MAX WOOLF", "KATHERINE CROWSON", "AHSEN KHALIQ" };
+const char *credits03[] = { "2IMAGE EDITOR USED", "PAINT DOT NET", "RICK BREWSTER" };
+const char *credits04[] = { "1TEXT GENERATOR", "MAX WOOLF" };
+const char *credits05[] = { "2FONTS USED", "DEEP SCRIPT 2", "MAXIM LEYZEROVICH" };
+const char *credits06[] = { "3FONTS USED", "LUCIDA CALLIGRAPHY", "CHARLES BIGELOW", "CHRIS HOLMES" };
+const char *credits07[] = { "3FONTS USED", "LINJA PONA", "DAVID ROBERTS", "JAN WESI" };
+const char *credits08[] = { "1PROGRAMMING", "RENDER NINETY-SIX TEAM" };
+const char *credits09[] = { "3COMPILING TOOL", "GUNVALK", "FILIPIANOSOL",
+                            "GAMMATENDONNINE" };
+const char *credits10[] = { "1ORIGINAL GAME", "NINTENDO" };
+const char *credits11[] = { "2WAIT ITS STILL GOING", "THERES NO MORE CREDITS", "HAVE SOME AI ONES I GUESS" };
+const char *credits12[] = { "1YOJI INEMIC UNIVERSE PLANET DESIGNER", "MARIO JULIEN MICHELS" };
+const char *credits13[] = { "23-D MARKER MARKER MARKER", "YOJIMOTO TYPE-A ADMIN", "HAZHAZARD MATTEO SEWELLS" };
+const char *credits14[] = { "1STARCARNER", "ZOMBIE JAI HAWKEYE" };
+const char *credits15[] = { "2TEXAS STREET EXECUTIVE PROGRAMMERS", "DAVE HAZELER", "GREG HAZELER" };
+const char *credits16[] = { "1JAPANESE TANK TROOPER CHARACTER CREATION", "JOHN" };
+const char *credits17[] = { "2FOOD SPOTNER", "TATSUO SATO", "SATOSHI SAITO" };
+const char *credits18[] = { "3VICMARK SOCIONICS CREWMEN", "YACHTY ISAMAYOR", "KATTUSUHIMOHO",
+                            "SUPER APART NL LAB" };
+const char *credits19[] = { "1DAZIEL ATHLETE DESIGNER", "ED GU STEROIS" };
+const char *credits20[] = { "1MARIO CLUB AGENT MAY ALSO BE MAY GOD", "JULIANNE KIMMAREJI" };
 
 struct CreditsEntry sCreditsSequence[] = {
     { LEVEL_CASTLE_GROUNDS, 1, 1, -128, { 0, 8000, 0 }, NULL },
@@ -232,7 +179,7 @@ void fade_into_special_warp(u32 arg, u32 color) {
     if (color != 0) {
         color = 0xFF;
     }
-
+    r96_music_fade(1, -1, 0.0, 512, 0);
     fadeout_music(190);
     play_transition(WARP_TRANSITION_FADE_INTO_COLOR, 0x10, color, color, color);
     level_set_transition(30, NULL);
@@ -306,6 +253,8 @@ void set_mario_initial_cap_powerup(struct MarioState *m) {
 }
 
 void set_mario_initial_action(struct MarioState *m, u32 spawnType, u32 actionArg) {
+    m->milk = 0;
+    m->defeatEnemy = 0;
     switch (spawnType) {
         case MARIO_SPAWN_DOOR_WARP:
             set_mario_action(m, ACT_WARP_DOOR_SPAWN, actionArg);
@@ -332,6 +281,8 @@ void set_mario_initial_action(struct MarioState *m, u32 spawnType, u32 actionArg
             set_mario_action(m, ACT_SPAWN_SPIN_AIRBORNE, 0);
             break;
         case MARIO_SPAWN_DEATH:
+            r96_stop_jingle();
+            r96_stop_music();
             set_mario_action(m, ACT_FALLING_DEATH_EXIT, 0);
             break;
         case MARIO_SPAWN_SPIN_AIRBORNE:
@@ -344,21 +295,33 @@ void set_mario_initial_action(struct MarioState *m, u32 spawnType, u32 actionArg
             set_mario_action(m, ACT_WATER_IDLE, 1);
             break;
         case MARIO_SPAWN_PAINTING_STAR_COLLECT:
+            r96_stop_jingle();
+            r96_stop_music();
             set_mario_action(m, ACT_EXIT_AIRBORNE, 0);
             break;
         case MARIO_SPAWN_PAINTING_DEATH:
+            r96_stop_jingle();
+            r96_stop_music();
             set_mario_action(m, ACT_DEATH_EXIT, 0);
             break;
         case MARIO_SPAWN_AIRBORNE_STAR_COLLECT:
+            r96_stop_jingle();
+            r96_stop_music();
             set_mario_action(m, ACT_FALLING_EXIT_AIRBORNE, 0);
             break;
         case MARIO_SPAWN_AIRBORNE_DEATH:
+            r96_stop_jingle();
+            r96_stop_music();
             set_mario_action(m, ACT_UNUSED_DEATH_EXIT, 0);
             break;
         case MARIO_SPAWN_LAUNCH_STAR_COLLECT:
+            r96_stop_jingle();
+            r96_stop_music();
             set_mario_action(m, ACT_SPECIAL_EXIT_AIRBORNE, 0);
             break;
         case MARIO_SPAWN_LAUNCH_DEATH:
+            r96_stop_jingle();
+            r96_stop_music();
             set_mario_action(m, ACT_SPECIAL_DEATH_EXIT, 0);
             break;
     }
@@ -426,37 +389,25 @@ void init_mario_after_warp(void) {
     if (gCurrDemoInput == NULL) {
         set_background_music(gCurrentArea->musicParam, gCurrentArea->musicParam2, 0);
 
-        if (gMarioState->flags & MARIO_METAL_CAP) {
-            play_cap_music(SEQUENCE_ARGS(4, SEQ_EVENT_METAL_CAP));
-        }
-
-        if (gMarioState->flags & (MARIO_VANISH_CAP | MARIO_WING_CAP)) {
-            play_cap_music(SEQUENCE_ARGS(4, SEQ_EVENT_POWERUP));
-        }
-
-#ifndef VERSION_JP
-        if (gCurrLevelNum == LEVEL_BOB
-            && get_current_background_music() != SEQUENCE_ARGS(4, SEQ_LEVEL_SLIDE)
-            && sTimerRunning != 0) {
-            play_music(SEQ_PLAYER_LEVEL, SEQUENCE_ARGS(4, SEQ_LEVEL_SLIDE), 0);
-        }
-#endif
+        if (gMarioState->flags & MARIO_METAL_CAP)  r96_play_cap_music(R96_EVENT_CAP_METAL);
+        if (gMarioState->flags & MARIO_VANISH_CAP) r96_play_cap_music(R96_EVENT_CAP_VANISH);
+        if (gMarioState->flags & MARIO_WING_CAP)   r96_play_cap_music(R96_EVENT_CAP_WING);
 
         if (sWarpDest.levelNum == LEVEL_CASTLE && sWarpDest.areaIdx == 1
-#ifndef VERSION_JP
             && (sWarpDest.nodeId == 31 || sWarpDest.nodeId == 32)
-#else
-            && sWarpDest.nodeId == 31
-#endif
-        )
+        ) {
+            r96_stop_jingle();
+            r96_stop_music();
             play_sound(SOUND_MENU_MARIO_CASTLE_WARP, gDefaultSoundArgs);
-#ifndef VERSION_JP
+
+        }
         if (sWarpDest.levelNum == LEVEL_CASTLE_GROUNDS && sWarpDest.areaIdx == 1
             && (sWarpDest.nodeId == 7 || sWarpDest.nodeId == 10 || sWarpDest.nodeId == 20
                 || sWarpDest.nodeId == 30)) {
+            r96_stop_jingle();
+            r96_stop_music();
             play_sound(SOUND_MENU_MARIO_CASTLE_WARP, gDefaultSoundArgs);
         }
-#endif
     }
 }
 
@@ -468,7 +419,6 @@ void warp_area(void) {
             unload_mario_area();
             load_area(sWarpDest.areaIdx);
         }
-
         init_mario_after_warp();
     }
 }
@@ -682,6 +632,7 @@ void initiate_painting_warp(void) {
                 gMarioState->marioObj->header.gfx.node.flags &= ~GRAPH_RENDER_ACTIVE;
 
                 play_sound(SOUND_MENU_STAR_SOUND, gDefaultSoundArgs);
+                r96_music_fade(1, -1, 0.0, 4200, 0);
                 fadeout_music(398);
                 queue_rumble_data(80, 70);
                 func_sh_8024C89C(1);
@@ -755,9 +706,7 @@ s16 level_trigger_warp(struct MarioState *m, s32 warpOp) {
                 sDelayedWarpTimer = 30;
                 sSourceWarpNodeId = WARP_NODE_F2;
                 play_transition(WARP_TRANSITION_FADE_INTO_COLOR, 0x1E, 0xFF, 0xFF, 0xFF);
-#ifndef VERSION_JP
                 play_sound(SOUND_MENU_STAR_SOUND, gDefaultSoundArgs);
-#endif
                 break;
 
             case WARP_OP_UNKNOWN_02: // bbh enter
@@ -929,6 +878,7 @@ void update_hud_values(void) {
         gHudDisplay.stars = gMarioState->numStars;
         gHudDisplay.lives = gMarioState->numLives;
         gHudDisplay.keys = gMarioState->numKeys;
+        gHudDisplay.wario_coins = gMarioState->numWarioCoins;
 
         if (numHealthWedges > gHudDisplay.wedges) {
             play_sound(SOUND_MENU_POWER_METER, gDefaultSoundArgs);
@@ -1013,6 +963,7 @@ s32 play_mode_paused(void) {
         set_menu_mode(RENDER_PAUSE_SCREEN);
     } else if (gPauseScreenMode == 1) {
         raise_background_noise(1);
+        r96_music_fade(0, -1, 1.0, 1500, 0);
         gCameraMovementFlags &= ~CAM_MOVE_PAUSE_SCREEN;
         set_play_mode(PLAY_MODE_NORMAL);
     } else if (gPauseScreenMode == 2) {
@@ -1133,7 +1084,7 @@ static s32 play_mode_unused(void) {
 
 s32 update_level(void) {
     s32 changeLevel;
-
+    r96_level_music_update();
     switch (sCurrPlayMode) {
         case PLAY_MODE_NORMAL:
             changeLevel = play_mode_normal();
@@ -1322,6 +1273,14 @@ s32 lvl_set_current_level(UNUSED s16 arg0, s32 levelNum) {
  * Play the "thank you so much for to playing my game" sound.
  */
 s32 lvl_play_the_end_screen_sound(UNUSED s16 arg0, UNUSED s32 arg1) {
-    play_sound(SOUND_MENU_THANK_YOU_PLAYING_MY_GAME, gDefaultSoundArgs);
+    if (save_file_get_total_star_count(gCurrSaveFileNum - 1, 0, 24) < 70) {
+        play_sound(SOUND_OBJ_BOWSER_LAUGH, gDefaultSoundArgs);
+        r96_play_jingle(R96_EVENT_KOOPA_MESSAGE, 0.1, 1.0, 1500);
+        r96_music_fade(0, -1, 0.0, 1, 1);
+    }
+    else {
+        r96_play_character_sound_no_arg(R96_MARIO_THANK_YOU_PLAYING_MY_GAME, R96_LUIGI_THANK_YOU_PLAYING_MY_GAME, R96_WARIO_THANK_YOU_PLAYING_MY_GAME);
+    }
     return 1;
 }
+
